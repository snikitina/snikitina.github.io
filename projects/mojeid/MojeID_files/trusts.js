// an object of this class contains both the attributes groups and the attributes themselvesfunction TrustList () {    this.listId = "attributes-table";    this.levelsId = "group-form";    this.levelId = "current-level";    this.headingClass = "group-heading";    this.topHeadingClass = "top-group-heading";    this.innerHeadingClass = "inner-group-heading";    this.attributeClass = "attr";    this.closedGroupClass = "group-closed",    this.attrs = [];    this.headings = [];    this.form = getFirstParentByTagAndClassName($(this.listId), "form", null);}TrustList.prototype.onLoad = function () {    var this_ = this;    this_.has_levels = this_.setActiveLevel();        forEach(getElementsByTagAndClassName("li", this.topHeadingClass, this.listId), function (heading) {        var obj = new TrustGroup(heading, this_);        this_.headings.push(obj);        this_.setCheckboxLabelSpan(obj);    });        forEach(getElementsByTagAndClassName("li", this.innerHeadingClass, this.listId), function (heading) {        var obj = new TrustGroup(heading, this_);        this_.headings.push(obj);        obj.parent_group = this_.findParentGroup(obj);        this_.setCheckboxLabelSpan(obj);    });        forEach(getElementsByTagAndClassName("li", this.attributeClass, this.listId), function (attr) {        var obj = new TrustAttr(attr, this_);        this_.attrs.push(obj);                var parent_group = this_.findParentGroup(obj);        if (parent_group) {             parent_group.children.push(obj);             obj.parent_group = parent_group;        }        this_.setCheckboxLabelSpan(obj);    });        this.fillDescendants();      this.initGroups();      this.initAttributes();    this.setLinksForNoValidation();    this.fixCustomLevel();};TrustList.prototype.setActiveLevel = function () {    var li_arr = getElementsByTagAndClassName("li", null, this.levelsId);    var custom_item = li_arr[0];    if (hasElementClass(custom_item, "active")) {        var radiobutton = findChildElements(custom_item, ['input[type="radio"]'])[0];        radiobutton.checked = true; // radiobutton isn't checked when the custom level is used        addElementClass($(this.listId), "custom");       } else {        // by default the submit should be enabled (a user can change the level)        addElementClass(this.form, "conditional-validation");        // but if the current trust level is the active one the form submit can be disabled         // i.e. no changes validation is needed        this.checkTrustLevel();     }              return (li_arr.length > 1);};TrustList.prototype.checkTrustLevel = function () {    var level = $(this.levelId).value;    var input = findChildElements($(this.levelsId), ['input[value="' + level + '"]'])[0];    if (input && input.checked) {        removeElementClass(this.form, "conditional-validation");    }};TrustList.prototype.fixCustomLevel = function () {    if (!hasElementClass($(this.listId), "custom")) {        return;    }        var with_parent_group = [], without_parent_group = [];    forEach(this.headings, function (heading) {        if (heading.parent_group) {            with_parent_group.push(heading);        } else {            without_parent_group.push(heading);        }    });        forEach(with_parent_group, function (heading) { heading.fixCheckbox(); });    forEach(without_parent_group, function (heading) { heading.fixCheckbox(); });};TrustList.prototype.initGroups = function () {    forEach(this.headings, function (heading) {        heading.init();    });};TrustList.prototype.fillDescendants = function () {    for (var i = 0; i < this.headings.length; i++) {                var parent_group = this.headings[i].parent_group;        if (!parent_group) { continue; }                parent_group.children.push(this.headings[i]);        forEach(this.headings[i].children, function (attr) {            parent_group.descendants.push(attr);        });    }};TrustList.prototype.findParentGroup = function (attr) {    var data_group = getNodeAttribute(attr.DOM, "data-group");    if (!data_group) { return; }        for (var i = 0; i < this.headings.length; i++) {        if (this.headings[i].checkbox && (data_group == this.headings[i].checkbox.value)) {            return this.headings[i];        }    }};TrustList.prototype.initAttributes = function () {    forEach(this.attrs, function (attr) {        attr.init();    });};TrustList.prototype.enableCheckboxes = function () {     forEach(flattenArray([this.headings, this.attrs]), function (el) {        el.checkbox.disabled = false;    });};TrustList.prototype.setLinksForNoValidation = function () {    forEach(getElementsByTagAndClassName("a", null, this.levelsId), function (link) {        addElementClass(link, "no-validation");    });};TrustList.prototype.checkSelection = function (obj) {    if (!obj.parent_group) { return; }        var span = obj.span, parent = obj.parent_group.span;    var checked = hasElementClass(span, "checked"), unchecked = hasElementClass(span, "unchecked"), somechecked = hasElementClass(span, "somechecked");              // if (hasElementClass(obj.parent_group.checkbox, "inverted")) {    //         return;    //     }        // if (hasElementClass(obj.checkbox, "inverted")) {    //         if (obj.parent_group.getChecked().length == obj.parent_group.children.length) {    //             removeElementClass(parent, "checked");    //             removeElementClass(parent, "somechecked");    //             addElementClass(parent, "unchecked");    //             obj.parent_group.checkbox.checked = false;    //             if (obj.parent_group.parent_group) {    //                 this.checkSelection(obj.parent_group);    //             }    //             return;    //         }    //         if ((obj.parent_group.getChecked().length == (obj.parent_group.children.length - 1)) && !obj.checkbox.checked) {    //             addElementClass(parent, "checked");    //             removeElementClass(parent, "unchecked");    //             removeElementClass(parent, "somechecked");    //             obj.parent_group.checkbox.checked = true;    //             if (obj.parent_group.parent_group) {    //                 this.checkSelection(obj.parent_group);    //             }    //             return;    //         }    //         if (obj.parent_group.parent_group) {    //             this.checkSelection(obj.parent_group);    //         }    //         return;    //     }    if (checked) {        if (obj.parent_group.getChecked().length == obj.parent_group.children.length) {            addElementClass(parent, "checked");            removeElementClass(parent, "unchecked");            removeElementClass(parent, "somechecked");            obj.parent_group.checkbox.checked = true;        } else {            addElementClass(parent, "somechecked");            removeElementClass(parent, "unchecked");            removeElementClass(parent, "checked");        }         }        if (unchecked) {        if (obj.parent_group.getChecked().length == (obj.parent_group.children.length - 1)) {            removeElementClass(parent, "checked");            addElementClass(parent, "somechecked");            obj.parent_group.checkbox.checked = false;        }                        var some = filter(function (child) {           if (hasElementClass(child.span, "somechecked")) {               return child;           }        }, obj.parent_group.children);                                            if (!obj.parent_group.getChecked().length) {            removeElementClass(parent, "somechecked");            addElementClass(parent, "unchecked");        }                  if (some.length && obj.parent_group) {            removeElementClass(parent, "unchecked");            addElementClass(parent, "somechecked");        }                  }          if (somechecked) {        removeElementClass(parent, "checked");        removeElementClass(parent, "unchecked");        addElementClass(parent, "somechecked");        obj.parent_group.checkbox.checked = false;    }          if (obj.parent_group.parent_group) {        this.checkSelection(obj.parent_group);    }};TrustList.prototype.setCheckboxLabelSpan = function (obj) {    obj.checkbox = findChildElements(obj.DOM, ['input[type="checkbox"]'])[0];    obj.label = findChildElements(obj.DOM, ['label'])[0];    if (obj.checkbox) {        obj.span = getFirstParentByTagAndClassName(obj.checkbox, "span", null);    }};/* a class for the attributes groups */function TrustGroup (node, trust_list) {    this.DOM = node;    this.trust_list = trust_list;    this.children = [];    this.descendants = [];   }TrustGroup.prototype.init = function () {     var turn_on_selection = true;          if (this.span) { removeElementClass(this.span, "disabled"); }    //connect(this.DOM, "onclick", this, "toggle");      EventHandlers.put(this.DOM, this, "toggle");          if (!this.parent_group) {        // close all groups        this.closeGroup();        // if (isEmpty(this.getChecked())) {        //             this.closeGroup();        //         }        //         if (this.getChecked().length == this.children.length) {        //             this.closeGroup();        //         }        //turn_on_selection = false;            } else {        this.closeGroup();        forEach(this.children, function (child) {            addElementClass(child.DOM, "inner-attr");        });    }        this.turnOnToggleSelection(turn_on_selection);        var arr = this.descendants.length ? this.descendants : this.children;    for (var i = 0, j = 0; i < arr.length; i++) {        if (arr[i].checkbox.checked) {            j++;        }    };        if (j == arr.length) {        removeElementClass(this.span, "unchecked");        addElementClass(this.span, "checked");        this.checkbox.checked = true;        return;    }        if (j) {        removeElementClass(this.span, "unchecked");        addElementClass(this.span, "somechecked");    }    // if (this.getChecked().length && (this.getChecked().length < this.children.length)) {    //     removeElementClass(this.span, "unchecked");    //     addElementClass(this.span, "somechecked");    // }};TrustGroup.prototype.fixCheckbox = function () {    if ((this.getChecked().length == this.children.length) && !this.checkbox.checked) {        this.checkbox.checked = true;        addElementClass(this.span, "checked");        removeElementClass(this.span, "unchecked");    }};TrustGroup.prototype.turnOnToggleSelection = function (turn) {    var this_ = this;        if (turn) {        forEach([this.label, this.span], function (el) {            //connect(el, "onclick", this_, "toggleSelection");             EventHandlers.put(el, this_, "toggleSelection");         });    } else {        forEach([this.label, this.span], function (el) {            disconnectAll(el);            // connect(el, "onclick", function (e) {             //                                         e.stop();             //                                         this_.toggle();            //                                     });            EventHandlers.put(el, this_, "toggle2");        });        addElementClass(this.span, "invisible");    }    };TrustGroup.prototype.toggle2 = function (e) {    e.stop();     this.toggle();};TrustGroup.prototype.toggle = function () {    if (hasElementClass(this.DOM, this.trust_list.closedGroupClass)) {        this.openGroup();    } else {        this.closeGroup();    }};TrustGroup.prototype.toggleSelection = function (e) {    var check;    if (!this.span) { return; }        //e.stopPropagation();    var check = hasElementClass(this.span, "checked");    // if (hasElementClass(this.checkbox, "inverted")) {    //         check = !check; // fix for IE    //     }    this.toggleCheckboxes(check);    if (this.parent_group) {         this.trust_list.checkSelection(this);    }};TrustGroup.prototype.toggleCheckboxes = function (check) {    forEach(this.children, function (child) {        var click_signal = false;        if (check) {            if (hasElementClass(child.span, "unchecked") || hasElementClass(child.span, "somechecked")) {                click_signal = true;            }        } else {            if (hasElementClass(child.span, "checked")) {                click_signal = true;            }        }        if (click_signal) {            signal(child.span, "onclick");                    }    });};TrustGroup.prototype.closeGroup = function () {    forEach(flattenArray([this.descendants, this.children]), function (el) {        addElementClass(el.DOM, "invisible");    });    addElementClass(this.DOM, this.trust_list.closedGroupClass);};TrustGroup.prototype.openGroup = function () {    forEach(this.children, function (el) {        removeElementClass(el.DOM, "invisible");        if (isNotEmpty(el.children)) {            el.closeGroup();        }    });    removeElementClass(this.DOM, this.trust_list.closedGroupClass);};TrustGroup.prototype.getChecked = function () {    return filter(function (child) {        if (child.checkbox.checked) {            return child;        }    }, this.children);        };/* a class for the attributes */function TrustAttr (node, trust_list) {    this.DOM = node;    this.trust_list = trust_list;}TrustAttr.prototype.init = function () {    if (!this.trust_list.has_levels) { return; }        this.trust_list.enableCheckboxes();    var this_ = this;        forEach([this.label, this.span], function (el) {        //connect(el, "onclick", this_, "toggle");         EventHandlers.put(el, this_, "toggle");     });        removeElementClass(this.span, "disabled");};TrustAttr.prototype.toggle = function () {    if (!hasElementClass($(this.trust_list.levelsId), "custom")) {        var current_li = getElementsByTagAndClassName("li", "active", $(this.trust_list.levelsId))[0];        var current_radio = findChildElements(current_li, ["input"])[0];        var custom_li = getElementsByTagAndClassName("li", null, $(this.trust_list.levelsId))[0];        var custom_radio = findChildElements(custom_li, ["input"])[0];                current_radio.checked = !current_radio.checked;        custom_radio.checked = !custom_radio.checked;        toggleElementClass("active", current_li, custom_li);        addElementClass($(this.trust_list.levelsId), "custom");    }        // toggle parent if the last unchecked is checked or the last unchecked is checked    if (this.parent_group) {         this.trust_list.checkSelection(this);    }};Trusts = {    onLoad: function () {        var list = new TrustList();        list.onLoad();    }};
if (typeof(gettext) == "undefined") {    gettext = function (msg) { return msg; }}String.prototype.trim = function () {    return this.replace(/^\s*|\s*$/g, "");}/* AddressForm --------------------------------------------------------------------------------------------------------------------- */function AddressForm (form_id) {    this.id = form_id;    this.types = this.getTypeArray();    this.types_2 = this.getTypeArray(); // used for id mapping        this.default_state_index = this.getDefaultStateIndex();               this.fieldsets = [];    var fieldsets = getElementsByTagAndClassName(null, AddressForm.FIELDSET_CLASS, form_id);    for (var i = 0; i < fieldsets.length; i++) {        this.fieldsets.push(new AddressFieldset(fieldsets[i], this));    }   }AddressForm.FIELDSET_CLASS = "address-fieldset";AddressForm.INVISIBLE_FIELDSET_CLASS = "address-fieldset-invisible";AddressForm.MAIN_FIELDSET_ID = "fieldset-1";AddressForm.prototype.getLastFieldset = function () {    var last_fieldsets = getElementsByTagAndClassName(null, AddressForm.INVISIBLE_FIELDSET_CLASS, this.id);    if (isNotEmpty(last_fieldsets)) {        return last_fieldsets[last_fieldsets.length - 1];    }};AddressForm.prototype.getTypeArray = function () {    var fieldset = this.getLastFieldset(), types = [];    if (fieldset) {        var select = findChildElements(fieldset, ["tr.type select"])[0];        if (select) {             forEach(select.options, function (option) {                if (option.value) {                    types.push(option.text);                }            });        }    }    return types;};AddressForm.prototype.getDefaultStateIndex = function () {    var fieldset = this.getLastFieldset();    if (fieldset) {         var state_select = findChildElements(fieldset, ["tr.country select"])[0];        if (state_select) {             return state_select.selectedIndex;         }    }    return 0;};AddressForm.prototype.init = function () {    for (var i = 0; i < this.fieldsets.length; i++) {        this.fieldsets[i].init();    }        // streets    var main_fieldset = new AddressFieldset($(AddressForm.MAIN_FIELDSET_ID), this);    forEach(flattenArray([this.fieldsets, main_fieldset]), function (f) {        f.street_rows = findChildElements(f.fieldset, ['tr[class*="street"]']);        if (f.isEditable()) {            f.setStreetInputs();        }    });};/* AddressFieldset --------------------------------------------------------------------------------------------------------------------- */function AddressFieldset (fieldset, form) {    this.fieldset = fieldset;    this.form = form;}AddressFieldset.prototype.init = function () {    this.hideHeading();    this.setType();        if (this.getSelect()) {        this.createToggleSelect();        this.non_type_rows = findChildElements(this.fieldset, ['tr:not(.type)']);        if (!this.isFilled()) {                        this.hide();                               } else {            this.select.selectedIndex = 1;            addElementClass(this.fieldset, "opened");               }    }    };AddressFieldset.prototype.setType = function () {     var id = getNodeAttribute(this.fieldset, "id"), form = this.form, i = 0, label_text = "";        if (id) {        this.type_index = id.charAt(id.length - 1);          label_text = form.types[this.type_index - 2];        i = findIdentical(form.types_2, label_text);         } else {        label_text = form.types_2[0];                   this.type_index = this.findValueByText(this.getSelect(), label_text);    }          var label = findChildElements(this.fieldset, ['tr.type .left-td label'])[0];    label.innerHTML = label_text + ":";    form.types_2.splice(i, 1);    removeElementClass(label, "required");};AddressFieldset.prototype.createToggleSelect = function () {    // hide the type select    var type_select = this.getSelect();    if (type_select) {        addElementClass(type_select, "invisible");    }        // create a new select with two options    var select = SELECT(null, [        OPTION({'value': '0'}, gettext("Same as permanent address")),         OPTION({'value': '1'}, gettext("Custom"))]);    var type_select = findChildElements(this.fieldset, ['.type .right-td select'])[0];    var td = findChildElements(this.fieldset, ['.type .right-td'])[0];    if (type_select) {        insertSiblingNodesAfter(type_select, select);     } else {        appendChildNodes(td, select);    }    this.select = select;    connect(select, "onchange", this, "toggleSelect");};AddressFieldset.prototype.toggleSelect = function () {    if (this.select.selectedIndex == 0) {        // make it the same as the permanent address        var checkbox = this.getDeleteCheckbox();        //alert(checkbox);        if (checkbox) {            checkbox.checked = true;        } else {            this.getSelect().selectedIndex = 0;        }        this.clean();            this.hide();        removeElementClass(this.fieldset, "opened");          } else {        // show all address fields to be edited, set the address type        this.show();        var select = this.getSelect();        if (select) {            select.selectedIndex = this.findIndex(select, this.type_index);            addElementClass(this.fieldset, "opened");           }                }};AddressFieldset.prototype.findIndex = function (select, value) {    for (var i = 0; i < select.length; i++) {        if (select.options[i].value == value) {            return i;        }    }    return 0;};AddressFieldset.prototype.findValueByText = function (select, text) {    for (var i = 0; i < select.length; i++) {        if (select.options[i].text == text) {            return select.options[i].value;        }    }    return 0;};AddressFieldset.prototype.getSelect = function () {    var selects = findChildElements(this.fieldset, ['.type .right-td select']);    if (isNotEmpty(selects)) { return selects[0]; }};AddressFieldset.prototype.isFilled = function () {    var select = this.getSelect();     if (select) { return select.selectedIndex; }};AddressFieldset.prototype.hide = function () {    forEach(this.non_type_rows, function (row) {        addElementClass(row, "invisible");    });};AddressFieldset.prototype.show = function () {    forEach(this.non_type_rows, function (row) {        if (!hasElementClass(row, "street2") && !hasElementClass(row, "street3")) {            removeElementClass(row, "invisible");        }    });    removeElementClass($("street-" + this.fieldset.id), "invisible");};AddressFieldset.prototype.hideHeading = function () {    forEach(getElementsByTagAndClassName("h6", null, this.form.id), function (heading) {        addElementClass(heading, "invisible");    });    };AddressFieldset.prototype.isEditable = function () {    var inputs = findChildElements(this.street_rows[0], ['input[type="text"]']);    if (isNotEmpty(inputs)) { return true; }};AddressFieldset.prototype.setStreetInputs = function () {    var rows = this.street_rows, filled_streets_length = 1;        for (var i = filled_streets_length; i < rows.length; i++) {        if (!findChildElements(rows[i], ['input[type="text"]'])[0].value) {            addElementClass(rows[i], "invisible");        } else {            filled_streets_length++;        }    }    if (filled_streets_length < rows.length) {        var td = getFirstElementByTagAndClassName("td", "right-td", rows[0]);        var input = getFirstElementByTagAndClassName("input", null, rows[0]);        if (td && input) {            //var div = DIV({'class': 'can-delete-wrapper'}, input);            // var not_input = getFirstElementByTagAndClassName(null, "help-text", td) || getFirstElementByTagAndClassName("ul", "errorlist", td);            //             if (not_input) {            //                 insertSiblingNodesBefore(not_input, div);            //             } else {            //                 appendChildNodes(td, div);            //             }                        var span = SPAN({"id": "street-" + this.fieldset.id, "class": "add-street-button", "title": gettext("Add one more \"Street\" field")}, " ");            connect(span, "onclick", this, "addStreetInput");            insertSiblingNodesAfter(input, span);                    }      }};AddressFieldset.prototype.addStreetInput = function () {    var hidden_rows = findChildElements(this.fieldset, ['tr.invisible[class*="street"]']);    if (hidden_rows.length == 1) {        addElementClass($("street-" + this.fieldset.id), "invisible");    }    removeElementClass(hidden_rows[0], "invisible");};AddressFieldset.prototype.getDeleteCheckbox = function () {    var checkboxes = findChildElements(this.fieldset, ['.can-delete input[type="checkbox"]']);    if (checkboxes) { return checkboxes[0]; }};AddressFieldset.prototype.clean = function () {    var form = this.form;    forEach(findChildElements(this.fieldset, [".country .right-td select"]), function (select) {         if (select.selectedIndex != form.default_state_index) {            select.selectedIndex = form.default_state_index;            signal(select, "onchange");        }    });                forEach(findChildElements(this.fieldset, ['input[type="text"]']), function (input) {                var value = input.value;        input.value = "";        if (value) { signal(input, "onclick"); }    });       forEach(getElementsByTagAndClassName(null, "errorlist", this.fieldset), function (errorlist) {        removeElement(errorlist);    });  };/*  ContactForm --------------------------------------------------------------------------------------------------------------------- */function ContactForm (id, select_id, required_fields, use_event_handlers) {    this.id = id;    this.select_id = select_id;    this.sets = [];    this.rows = [];    this.hidden_rows = [];    this.required_fields = required_fields;    this.primary_type = "1";    this.use_event_handlers = use_event_handlers;};ContactForm.prototype.init = function () {    this.hideHeadings();    //this.removeObsoleteClasses();    this.initSets();    this.setRequiredFields();    this.hideRows();    this.setLabels();    this.createSelect();    this.addButton();};ContactForm.prototype.setRequiredFields = function () {    if (!this.required_fields) { return true; }    for (var i = 0; i < this.required_fields.length; i++) {        var row = this.findRowById(this.required_fields[i]);        if (row) { row.setRequiredField(); }            }};ContactForm.prototype.hideHeadings = function () {    var rows = getElementsByTagAndClassName("tr", "has-heading", this.id);    forEach(rows, function (row) {        addElementClass(row, "invisible");    });};ContactForm.prototype.removeObsoleteClasses = function () {    var rows = getElementsByTagAndClassName("tr", "last-in-fieldset", this.id);    forEach(rows, function (row) {        removeElementClass(row, "last-in-fieldset");    });};ContactForm.prototype.getDOMRows = function () {    var rows = filter(function (row) {         if (!hasElementClass(row, "has-heading") && !hasElementClass(row, "errors-message") && !hasElementClass(row, "last-in-fieldset")) {            return row;         }}, getElementsByTagAndClassName("tr", null, this.id));    return rows;};ContactForm.prototype.initSets = function () {    var names = [], rows = this.getDOMRows();    for (var i = 0; i < rows.length; i++) {        var name = getNodeAttribute(rows[i], "class");        if (name && (findIdentical(names, name) == -1)) {            names.push(name);            var set = new ContactSet(name, this);            this.sets.push(set);            set.init();        }    }};ContactForm.prototype.hideRows = function () {    for (var i = 0; i < this.rows.length; i++) {        var row = this.rows[i];        var required = row.isRequired();        var stored = row.storedInDatabase();        if (stored || row.isFilled() || row.hasErrors() || required) {            if (stored) {                var checkbox = row.getDeleteCheckbox();                if (checkbox) {                    if (row.hasErrors() || $(row.set.name + "-errors")) {                        checkbox.checked = false;                     } else if (checkbox.checked) {                        addElementClass(row.row, "invisible");                    }                }            } else if (required) {                var primary_type_index = row.findIndexOfPrimaryType();                if (primary_type_index) {                    row.getSelect().selectedIndex = primary_type_index;                }            }        } else {            var inputs = findChildElements(row.row, ['.right-td input[type="text"]']);            if (!getNodeAttribute(inputs[0], "disabled")) {                            this.hidden_rows.push(row);            }            addElementClass(row.row, "invisible");            if (!row.isFilled() && getNodeAttribute(inputs[0], "disabled")) {                continue;            }        }               row.makeDeletable(required);    }};ContactForm.prototype.setLabels = function () {    for (var i = 0; i < this.rows.length; i++) {                var select = findChildElements(this.rows[i].row, ['.left-td select']);                if (isNotEmpty(select)) {            var text = "";            for (var j = 0; j < select[0].length; j++) {                if (select[0].options[j].value == this.rows[i].type.name) {                    text = select[0].options[j].text;                    break;                }            }            var span = findChildElements(this.rows[i].row, ['.left-td span']);            if (isEmpty(span)) { return; }            replaceChildNodes(span[0], text + ":");            toggleElementClass("invisible", span[0], select[0]);                    } else {            var span = findChildElements(this.rows[i].row, ['.left-td span.field-name']);            var label = findChildElements(this.rows[i].row, ['.left-td label']);            if (label) {                //var text = scrapeText(label[0]).split(":")[0];                var text = label[0].innerHTML.split(":")[0];                //replaceChildNodes(span[0], text + ":");                span[0].innerHTML = text + ":";                toggleElementClass("invisible", label[0], span[0]);            }        }        this.rows[i].verbose_name = text;    }};ContactForm.prototype.createSelect = function () {    var select_tr = TR({"id": this.select_id + "-tr", "class": "invisible"}, [        TD({"class": "left-td"}, SELECT({"id": "contact-select", "class": "no-validation"}, [])),        TD({"class": "right-td"}, [])]);            appendChildNodes(this.getTbody(), select_tr);    this.fillSelect();    connect(getFirstElementByTagAndClassName("select", null, select_tr), "onchange", this, "switchSelect");};ContactForm.prototype.addButton = function () {    var heading = getFirstElementByTagAndClassName("h5", null, this.id);        var span = SPAN({"id": this.id + "-add", "title": gettext("Add a new contact field")}, " ");    connect(span, "onclick", this, "addRow");    appendChildNodes(heading, span);    if (this.hidden_rows.length == 0) { addElementClass(span, "invisible"); }    setStyle(heading, {'margin-right': '23px'});};ContactForm.prototype.getTbody = function () {    return getFirstElementByTagAndClassName("tbody", null, this.id);};ContactForm.prototype.fillSelect = function () {    var options = [];    forEach(this.hidden_rows, function (row) {        var inputs = findChildElements(row.row, ['.right-td input[type="text"]']);        if (isNotEmpty(inputs)) {            if (!getNodeAttribute(inputs[0], "disabled")) {                options.push(OPTION({"value": getNodeAttribute(row.row, "id")}, row.getVerboseName()));            }        }            });    var sorted = this.sortOptions(options);    replaceChildNodes(this.select_id, sorted);};ContactForm.prototype.sortOptions = function (options) {    var form = this;    options.sort(function (a, b) {        var a_index = findIdentical(form.rows, form.findRowById(a.value));        var b_index = findIdentical(form.rows, form.findRowById(b.value));        return a_index - b_index;    });    return options;};ContactForm.prototype.switchSelect = function (e) {    var select = e.src();    var chosen = select.options[select.selectedIndex];        var active = this.getActiveRow();    var active_id = getNodeAttribute(active.row, "id");        if (active_id != chosen.value) {         active.unset();        this.setSelect(chosen);    }};ContactForm.prototype.getActiveRow = function (rows) {    if (rows) {        var active = filter(function (row) { if (hasElementClass(row, "active-row")) return row; }, rows)[0];        return this.findRowById(getNodeAttribute(active, "id"));    } else {        return filter(function (row) { if (hasElementClass(row.row, "active-row")) return row; }, this.rows)[0];    }};ContactForm.prototype.addRow = function () {    var added = getElementsByTagAndClassName("tr", "added", this.id);        if (isEmpty(this.hidden_rows)) { return true; }    if (added.length > 0) {        var row = this.getActiveRow(added);        if (row) { row.setLabel(); }    }    this.setSelect($(this.select_id).options[0]);};ContactForm.prototype.findRowById = function (id) {    for (var i = 0; i < this.rows.length; i++) {        if (getNodeAttribute(this.rows[i].row, "id") == id) {            return this.rows[i];        }    }    };ContactForm.prototype.setSelect = function (option) {    var row = this.findRowById(option.value);    var dom_row = removeElement(row.row);    if (!row) { return false; }    appendChildNodes(this.getTbody(), row.row);      $(this.select_id).selectedIndex = option.index;    var select = removeElement($(this.select_id));         // append select and toggle html elements            appendChildNodes(getFirstElementByTagAndClassName("td", "left-td", row.row), select);    removeElementClass(row.row, "invisible");             // add classes    addElementClass(row.row, "added");    addElementClass(row.row, "active-row");        // set both selects        var set_select = row.getSelect();    for (var i = 0; i < set_select.length; i++) {        if (set_select.options[i].value.toLowerCase() == row.type.name) {            set_select.selectedIndex = i;            break;        }    }        var input = findChildElements(row.row, ['.right-td input[type="text"]'])[0];    if (input && input.value) { input.value = ""; }        // remove row from the list of hidden rows    var row_index = findIdentical(this.hidden_rows, row);    if (row_index != -1) {        this.hidden_rows.splice(row_index, 1);    }        // hide add buttons and don't show the select box if there are no hidden rows    if (isEmpty(this.hidden_rows)) {        addElementClass($(this.id + "-add"), "invisible");           addElementClass(select, "invisible");        removeElementClass(row.getSpan(), "invisible");     } else {        addElementClass(row.getSpan(), "invisible");         removeElementClass(select, "invisible");                 }  };ContactForm.prototype.findOptionByValue = function (value) {    for (var i = 0; i < $(this.select_id).length; i++) {                if ($(this.select_id).options[i].value == value) {            return $(this.select_id).options[i];        }    }};ContactForm.prototype.addOption = function (id) {    var option = OPTION({'value': id}, this.findRowById(id).getVerboseName());    appendChildNodes($(this.select_id), option);    // don't use html options collection    var options = findChildElements($(this.select_id), ["option"]);    replaceChildNodes(this.select_id, this.sortOptions(options));};ContactForm.prototype.checkEmptyRowsFields = function () {    for (var i = 0; i < this.rows.length; i++) {        if (this.rows[i].isRequired()) { continue; }        if (!this.rows[i].isFilled() && !hasElementClass(this.rows[i].row, "invisible") && !this.rows[i].storedInDatabase()) {            this.rows[i].clean();        }    }};/*  ContactSet --------------------------------------------------------------------------------------------------------------------- */function ContactSet (name, form) {    this.name = name;    this.form = form;    this.types = [];    this.rows = [];    this.verbose_name = this.getVerboseName();};ContactSet.prototype.getSplitName = function () {    return this.name.split("_")[0];};ContactSet.prototype.getDOMRows = function () {    return getElementsByTagAndClassName("tr", this.name, this.form.id);};ContactSet.prototype.getFirstDOMRow = function () {    return this.getDOMRows()[this.getDOMRows().length - 1];    //return this.getDOMRows()[0];};ContactSet.prototype.hasTypeSelect = function () {    return getFirstElementByTagAndClassName("select", null, this.getFirstDOMRow());};ContactSet.prototype.getVerboseName = function () {    var node = getFirstElementByTagAndClassName("span", "field-name", this.getFirstDOMRow());    if (!node) return "";    var name = scrapeText(node);    var name_arr = name.split(" ");    name_arr[name_arr.length - 1] = name_arr[name_arr.length - 1].toLowerCase();    return name_arr.join(" ");}ContactSet.prototype.init = function () {    var rows = this.getDOMRows();      for (var i = 0; i < rows.length; i++) {        var row = new ContactRow(rows[i], this, null);        this.rows.push(row);        this.form.rows.push(row);    }        this.initTypes();    this.mapIds();    this.checkForUniquenessErrors();};ContactSet.prototype.checkForUniquenessErrors = function () {    if ($(this.name + "-errors") && (this.name != "email_set")) {        // check if some fields are filled, but not primary        if (this.checkFilledFields()) {            var set = this;            forEach(set.rows, function (row) {                if (row.isFilled() && !row.isPrimary() && !row.storedInDatabase()) {                    //var div = findChildElements(row.row, ["td.right-td .field"])[0];                    var input = findChildElements(row.row, ['.right-td input[type="text"]'])[0];                    var span = SPAN({'class': 'set-to-primary'}, gettext("Set as primary"));                    insertSiblingNodesAfter(input, span);                    connect(span, "onclick", set, "setToPrimary");                }            });        }    }};ContactSet.prototype.setToPrimary = function (e) {    var span = e.src(), primary_row, text;            forEach(this.rows, function (row) {        if (row.isPrimary()) { primary_row = row; }        else {            forEach(findChildElements(row.row, [".set-to-primary"]), function (link) {                if (span == link) {                     text = findChildElements(row.row, ['td.right-td input[type="text"]'])[0].value;                    row.remove();                }                removeElement(link);            });        }    });           // hide error messages     if ($(this.name + "-errors")) { removeElement($(this.name + "-errors")); }        // show row    removeElementClass(primary_row.row, "invisible");           // set select to primary type    var select = primary_row.getSelect();    for (var i = 0; i < select.length; i++) {        if (select.options[i].value.toLowerCase() == primary_row.type.name) {            select.selectedIndex = i;            break;        }    }        // remove row form hidden rows array    var row_index = findIdentical(this.form.hidden_rows, primary_row);    if (row_index != -1) {        this.form.hidden_rows.splice(row_index, 1);    }            // update the input with the value from non-primary row       findChildElements(primary_row.row, ['td.right-td input[type="text"]'])[0].value = text;         // refill select with the hidden rows    this.form.fillSelect(); };ContactSet.prototype.checkFilledFields = function () {    var primary_filled = false, other_filled = false;    for (var i = 0; this.rows.length; i++) {        if (this.rows[i].isFilled()) {            if (this.rows[i].type.name != "primary") {                primary_filled = true;                return true;            } else {                other_filled = true;            }        }    }    return other_filled;};ContactSet.prototype.initTypes = function () {    var select = this.hasTypeSelect(), type_names = [];        if (!select) {        for (var i = 0; i < this.rows.length; i++) {            var row_id = getNodeAttribute(this.rows[i].row, "id");            if (row_id) {                var t = row_id.split("-")[1];                this.types.push(new ContactType(t, "", this));                type_names.push(t);            }        }        return;    }            if (this.rows.length >= select.length) {        for (var i = 0; i < this.rows.length; i++) {            var row_id = getNodeAttribute(this.rows[i].row, "id");            if (row_id) {                var t = row_id.split("-")[1];                this.types.push(new ContactType(t, "", this));                type_names.push(t);            } else {                for (var j = 1; j < select.length; j++) {                    if (findIdentical(type_names, select.options[j].value) == -1) {                        j = select.options[j].value;                        break;                    }                }                type_names.push(j);                this.types.push(new ContactType(j, "", this));            }        }        return;    }     for (var i = 0; i < select.length; i++) {        var option = select.options[i];        if (option.value) {            this.types.push(new ContactType(option.value.toLowerCase(), scrapeText(option), this));        }    }};ContactSet.prototype.getTypeObj = function (type_name) {    for (var i = 0; i < this.types.length; i++) {        if (this.types[i].name == type_name) { return this.types[i]; }    }};ContactSet.prototype.mapIds = function () {    var rows = this.rows, types = [];          for (var i = 0; i < rows.length; i++) {        var row_id = getNodeAttribute(this.rows[i].row, "id");        if (row_id) {            var type = this.getTypeObj(row_id.split("-")[1]);            if (!type) { continue; }            rows[i].type = type;            types.push(type.name);            continue;        }        var selects = findChildElements(rows[i].row, ['.left-td select']);        if (isNotEmpty(selects)) {            if ((selects[0].selectedIndex != 0)) {                var type = this.getTypeObj(selects[0].selectedIndex);                rows[i].type = type;                types.push(type.name);                setNodeAttribute(rows[i].row, "id", this.name + "-" + type.name);                continue;            }            for (var j = 0; j < this.types.length; j++) {                if (findValue(types, this.types[j].name) == -1) {                    setNodeAttribute(rows[i].row, "id", this.name + "-" + this.types[j].name);                    types.push(this.types[j].name);                    rows[i].type = this.types[j];                     break;                }            }                    }     }};/*  ContactType --------------------------------------------------------------------------------------------------------------------- */function ContactType (name, verbose_name, set) {    this.name = name;    this.set = set;    this.verbose_name = verbose_name;}/*  ContactRow --------------------------------------------------------------------------------------------------------------------- */function ContactRow (row, set, type) {    this.row = row;    this.set = set;    this.type = type;}ContactRow.prototype.getId = function () {    return getNodeAttribute(this.row, "id");};ContactRow.prototype.isFilled = function () {    var inputs = findChildElements(this.row, ['input[type="text"]']);    if (isNotEmpty(inputs)) {        for (var i = 0; i < inputs.length; i++) {            if (!inputs[i].value || !inputs[i].value.trim()) { return false; }        }        return true;    }    var inputs = findChildElements(this.row, ['.left-td input[type="hidden"]']);     if (isNotEmpty(inputs)) {        return true;    }       return false;};ContactRow.prototype.hasErrors = function () {    return getElementsByTagAndClassName(null, "errorlist", this.row).length;};ContactRow.prototype.storedInDatabase = function () {    var inputs = findChildElements(this.row, ['.right-td input[type="hidden"]']);    for (var i = 0; i < inputs.length; i++) {        if (!getNodeAttribute(inputs[i], "value")) { return false; }    }    return true;};ContactRow.prototype.findSelectedOptionValue = function () {    var select = this.getSelect();    if (select) {         //alert('select id: ' + select.id + "value:  " + select.options[select.selectedIndex].value.toLowerCase());          return select.options[select.selectedIndex].value.toLowerCase();    }};// a hack for the ugly hack in the templateContactRow.prototype.findHiddenType = function () {    var inputs = findChildElements(this.row, ['.left-td input[type="hidden"]']);    if (isNotEmpty(inputs)) {        return inputs[0].value;    }    };ContactRow.prototype.getDeleteCheckbox = function () {    var checkbox = findChildElements(this.row, ['.can-delete input[type="checkbox"]'])[0];    if (!checkbox) { return false; }    if (getNodeAttribute(checkbox, "checked")) { return checkbox; }};ContactRow.prototype.makeDeletable = function (required) {    var button = getFirstElementByTagAndClassName(null, "can-delete", this.row);    if (!button && this.storedInDatabase()) { return; }        addElementClass(this.row, "deletable");        // var wrapper = getFirstElementByTagAndClassName(null, "field", this.row);    //     var button = getFirstElementByTagAndClassName(null, "can-delete", wrapper);    //         if (required) {         if (button) { addElementClass(button, "invisible"); }        return true;     }    if (!button) {        var button = STRONG({'title': gettext("Delete"), 'class': 'can-delete'}, " ");        var input = findChildElements(this.row, ['.right-td input[type="text"]'])[0];        if (input) { insertSiblingNodesAfter(input, button); }        //appendChildNodes(wrapper, button);    }    if ((typeof EventHandlers != "undefined") && this.set.form.use_event_handlers) {        EventHandlers.put(button, this, "remove");     } else {                        connect(button, "onclick", this, "remove");    }};ContactRow.prototype.getDeleteCheckbox = function () {    var checkboxes = findChildElements(this.row, ['.right-td input[type="checkbox"]']);    if (checkboxes) { return checkboxes[0]; }};ContactRow.prototype.remove = function (e) {    if (this.storedInDatabase()) {        var checkbox = this.getDeleteCheckbox();        checkbox.checked = "checked";         addElementClass(this.row, "invisible");                    } else {        var active = this.set.form.getActiveRow(), index;        this.unset();        if (this != active) {             this.set.form.addOption(getNodeAttribute(this.row, "id"));         }        removeElementClass($(this.set.form.id + "-add"), "invisible");         if (this.hasErrors()) {            forEach(getElementsByTagAndClassName(null, "errorlist", this.row), function (error) {                removeElement(error);            });        }        if (active) {            if (getNodeAttribute(active.row, "id")) {                index = this.set.form.findOptionByValue(getNodeAttribute(active.row, "id")).index;            } else {                index = 0;            }        }        $(this.set.form.select_id).selectedIndex = index;        addElementClass(this.row, "invisible");    }   };ContactRow.prototype.unset = function () {    this.set.form.hidden_rows.push(this);    removeElementClass(this.row, "active-row");    removeElementClass(this.row, "added");    addElementClass(this.row, "invisible");        this.clean();};ContactRow.prototype.clean = function () {    var input = findChildElements(this.row, ['td.right-td input[type="text"]'])[0];    var select = this.getSelect();    if (!input && !select) { return; }        if (Changes) {        var input_obj = Changes.findFieldByDOM(input);        var select_obj = Changes.findFieldByDOM(input);            }           var input_value = "";    if (input_obj.value) { input_value = input_obj.value; }    input.value = input_value;    if (input_obj) { signal(input, "onclick"); }        if (select) { select.selectedIndex = 0; }};ContactRow.prototype.getVerboseName = function () {    // var verbose_name = this.type && this.type.verbose_name ? this.type.verbose_name : "";    //     return verbose_name;    return this.verbose_name;};ContactRow.prototype.getSelect = function () {    return getFirstElementByTagAndClassName("select", null, this.row);};ContactRow.prototype.findIndexOfPrimaryType = function () {    var select = this.getSelect();    if (select) {        for (var i = 0; i < select.length; i++) {            if (select.options[i].value == this.set.form.primary_type) {                break;            }        }    }    return i;};ContactRow.prototype.getSpan = function () {    return getFirstElementByTagAndClassName("span", "field-name", this.row);};ContactRow.prototype.getLabel = function () {    return getFirstElementByTagAndClassName("label", null, this.row);};ContactRow.prototype.setLabel = function () {    var select = $(this.set.form.select_id);        for (var i = 0; i < select.length; i++) {        if (select.options[i].value.toLowerCase() == getNodeAttribute(this.row, "id")) {            select.remove(i);            break;        }    }            removeElementClass(this.row, "active-row");    removeElementClass(this.getSpan(), "invisible");};ContactRow.prototype.setRequiredField = function () {    var node = this.getSpan();    if (node) addElementClass(node, "required");};ContactRow.prototype.isPrimary = function () {    if (this.getId().split("-")[1] == this.set.form.primary_type) { return true; }    return false;};ContactRow.prototype.isPrimaryEmail = function () {    return (this.getId() == ("email-" + this.set.form.primary_type));};ContactRow.prototype.isRequired = function () {    var index = findIdentical(this.set.form.required_fields, this.getId());    if (index != -1) { return true; }    return false;};WarningForm = {        init: function (form) {        this.popup = $("warning-popup-content");        this.popupLink = $("warning-popup");        this.columns = $("warning-columns");                 if (this.columns) {            this.form = form;            this.fields_data = {};            this.rememberFields();                       this.cancel_radiobutton = $("id_answer_2");            this.default_radiobutton = $("id_answer_0");                         if (Popup) {                connect(this.form, "onsubmit", WarningForm, "showPopup");                 connect(this.popupLink, "onclick", function (e) {                                                       if (WarningForm.cancel_radiobutton.checked) {                        if (WarningForm.isChanged()) {                            WarningForm.cancelChanges();                            Popup.closePopup(WarningForm.popup);                             e.stop();                                               }                    } else {                        this.form.submit();                      }                });            }        }            },        cancelChanges: function () {        for (field in this.fields_data) {            if (this.fields_data[field]['changed']) {                if (this.fields_data[field]['type'] == 'input') {                    $(field).value = this.fields_data[field]['value'];                }                if (this.fields_data[field]['type'] == 'select') {                    $(field).selectedIndex = this.fields_data[field]['value'];                }            }        }        this.default_radiobutton.checked = true;        this.cancel_radiobutton.checked = false;    },        rememberFields: function () {        var fields = this.columns.innerHTML.split(","), obj = WarningForm;                forEach(fields, function (field) {            if (field == 'address') {                var parent = $("fieldset-1");            } else {                var parent = getFirstElementByTagAndClassName("tr", field, this.form);            }                        if (!parent) { return; }                        forEach(findChildElements(parent, ['.right-td input[type="text"]']), function (input) {                obj.fields_data[input.id] = {'type': 'input'};                obj.fields_data[input.id]['value'] = obj.getValue(input, 'input');            });                        forEach(findChildElements(parent, ['.right-td select']), function (select) {                obj.fields_data[select.id] = {'type': 'select'};                obj.fields_data[select.id]['value'] = obj.getValue(select, 'select');            });        });    },        isChanged: function () {        var changed = false;        for (field in this.fields_data) {            var value;            if (this.fields_data[field]['type'] == 'input') {                value = $(field).value;            }            if (this.fields_data[field]['type'] == 'select') {                value = $(field).selectedIndex;            }                        if (value != this.fields_data[field]['value']) {                this.fields_data[field]['changed'] = true;                changed = true;            }        }                return changed;    },        getValue: function (field, field_type) {        if (field_type == 'input') {            return field.value;        }        if (field_type == 'select') {            return field.selectedIndex;        }    },        showPopup: function (e) {         if (WarningForm.isChanged()) {            window.scroll(0, 0);            Popup.showPopup(this.popup);            e.stop();        }    }}HelpTexts = {    icon_class: "help-icon",    message_class: "help-message",     reposition_class: "repositioned",    width: 228, // together with 'boder', 'shadow', and 'left'     onLoad: function () {        var icons = getElementsByTagAndClassName(null, this.icon_class), obj = this;                forEach(icons, function (icon) {            var message = STRONG({'class': 'invisible ' + obj.message_class}, getNodeAttribute(icon, "title"));            icon.removeAttribute("title");            appendChildNodes(icon, message);            connect(icon, "onclick", obj, "showHelpMessage");        });                 connect(document, "onclick", obj, "hideHelpMessage");    },    hideHelpMessage: function (e) {        var messages = findChildElements(getFirstParentByTagAndClassName("form", null), ['.help-message:not(.invisible)']);        if (isEmpty(messages)) { return true; }                var cursor = e.mouse().page;        forEach(messages, function (message) {            var dimensions = getElementDimensions(message);            var position = getElementPosition(message);            var area = [position.x, position.x + dimensions.w, position.y, position.y + dimensions.h];            if (!(cursor.x > area[0] && cursor.x < area[1] && cursor.y > area[2] && cursor.y < area[3])) {                addElementClass(message, "invisible");            }        });    },    showHelpMessage: function (e) {                e.stop();        var message = findChildElements(e.src(), ['strong'])[0];        toggleElementClass("invisible", message);                  var pos = getElementPosition(message);        if (pos) {            if (!hasElementClass(message, this.reposition_class) && ((pos.x + this.width) > getElementDimensions('editor').w)) {                 addElementClass(message, this.reposition_class);                return;            }        }        if (hasElementClass(message, this.reposition_class)) {             removeElementClass(message, this.reposition_class);        }    }}ImagePreview = {    blockId: "image-preview",    w: 120,    h: 160,     noImagePath: '/media/mojeid/img/redesign/no_image.gif',    onLoad: function () {        var label = getElementsByTagAndClassName("label", null, ImagePreview.blockId)[0];        this.file_input = getFirstElementByTagAndClassName("input", "file-input", ImagePreview.blockId);         if (!this.file_input) { return; }        this.imageId = getNodeAttribute(this.file_input, "id") + "-preview";                               var delete_button = SPAN({'class': 'button button-2'}, gettext("Delete"));        insertSiblingNodesAfter(this.file_input.parentNode, delete_button);        this.deleteButton = delete_button;                if (label) {            this.deleteCheckbox = $(getNodeAttribute(label, "for"));                        var checkbox_parent = getFirstParentByTagAndClassName(this.deleteCheckbox, "span", null);                        addElementClass(label, "invisible");            addElementClass(checkbox_parent, "invisible");        } else {            addElementClass(this.deleteButton, "disabled");        }                if (typeof FileReader === 'undefined') {            connect(this.deleteButton, "onclick", function (e) {                if (hasElementClass(e.src(), "disabled")) { return; }                ImagePreview.removeImage(e);                disconnectAll(delete_button, "onclick");                connect(ImagePreview.file_input, "onchange", function (e) {                    ImagePreview.deleteCheckbox.checked = false;                                    });            });        } else {            connect(this.deleteButton, "onclick", function (e) {                if (hasElementClass(e.src(), "disabled")) { return; }                ImagePreview.removeImage(e);                ImagePreview.clearInput();            });            addElementClass($(ImagePreview.blockId), "file-reader");                    this.ratio = this.w / this.h;                    this.currentImageSrc = $(this.imageId).src;            connect(this.file_input, "onchange", ImagePreview, "changeFile");                    }    },    removeImage: function (e) {        $(ImagePreview.imageId).src = window.location.protocol + "//" + window.location.host + ImagePreview.noImagePath;        if (ImagePreview.deleteCheckbox) {            ImagePreview.deleteCheckbox.checked = true;            ImagePreview.deleteCheckbox.click();        }        addElementClass(e.src(), "disabled");                    },    clearError: function () {        var parent = getFirstParentByTagAndClassName($(ImagePreview.blockId), "td", null);        forEach(getElementsByTagAndClassName("ul", "errorlist", parent), function (list) {            removeElement(list);          });                         },    clearInput: function () {        var new_input = INPUT({}), attrs = ['type', 'class', 'id', 'size', 'name'];        forEach(attrs, function (attr) {            var attr_value = getNodeAttribute(ImagePreview.file_input, attr);            if (attr_value) {                setNodeAttribute(new_input, attr, attr_value);            }        });         swapDOM(this.file_input, new_input);        this.file_input = new_input;         connect(this.file_input, "onchange", ImagePreview, "changeFile");                 if (Changes) {             var file_input_obj = Changes.findFieldByDOM(this.file_input);            file_input_obj.DOM = this.file_input;            connect(this.file_input, "onchange", file_input_obj, "changed");            file_input_obj.changed();        }    },    showError: function (input, error_text) {        var error = UL({'class': 'errorlist'}, LI({}, error_text));        insertSiblingNodesAfter($(ImagePreview.blockId), error);                ImagePreview.clearInput();         $(ImagePreview.imageId).src = ImagePreview.currentImageSrc;    },    changeFile: function (e) {        var input = e.src();        if (typeof input.files === "undefined") { return; }        ImagePreview.clearError();        var file = input.files[0];                        if (!file.type.match(/(png|jpeg)/)) {             ImagePreview.showError(input, gettext("File you uploaded had invalid format or was corrupted. Required formats are JPEG, PNG."));            return;         }        if (parseInt(file.size) > (input, 2 * 1024 * 1024)) {             ImagePreview.showError(input, gettext("File you uploaded was too large. Maximum allowed size is 2.0 MB."));            return;         }                var image = $(ImagePreview.imageId);        var reader = new FileReader();        reader.onload = (function (img) { return function (e) {             setStyle(img, {'visibility': 'hidden'});            img.src = e.target.result;                                    img.onload = function () {                                img.removeAttribute('style');                var w = elementDimensions(img).w - 2, h = elementDimensions(img).h - 2, ratio;                    if ((w <= ImagePreview.w) && (h <= ImagePreview.h)) { return; }                               if ((w / h) > ImagePreview.ratio) {                    ratio = w / ImagePreview.w;                } else {                    ratio = h / ImagePreview.h;                }                                  setElementDimensions(img, {w: Math.ceil(w / ratio), h: Math.ceil(h / ratio)});                            }        }; })(image);        reader.readAsDataURL(file);                removeElementClass(this.deleteButton, "disabled");    }}Profile = {    onLoad: function (use_event_handlers) {        ImagePreview.onLoad();        HelpTexts.onLoad();        try {            address_form = new AddressForm("address-block");               address_form.init();            contact_form = new ContactForm("contact-block", "contact-select", [], use_event_handlers);                contact_form.init();            connect($("user_form"), "onsubmit", contact_form, "checkEmptyRowsFields");             WarningForm.init($("user_form"));        } finally {            removeElementClass($("user_form"), "invisible");           }    }}AuthorizedRequest = {    parentId: "authorizedrequest",    onLoad: function () {        if ($(this.parentId)) {            var hash = window.location.hash.slice(1);            var forms = $$("#" + this.parentId + " form");            forEach(forms, function (form) {                var id_arr = getNodeAttribute(form, "id").split("-");                var set_id = id_arr[0].split("_")[0]+ "_set-1";                var button_id = id_arr.slice(0, 2).join("-");                                if ($(set_id)) {                    var input = findChildElements($(set_id), [".right-td input"])[0];                    if (input) {                        var link = SPAN({'id': button_id, 'class': 'popup-link', 'title': gettext("Click to confirm the change.")}, " ");                        connect(link, "onclick", Popup, "showPopupEvent");                        insertSiblingNodesAfter(input, link);                        }                                          if (hasElementClass($(set_id), "invisible")) {                        removeElementClass($(set_id), "invisible");                    }                                                                      if (!hash) { return; }                                        if (hash == id_arr[0]) {                        addElementClass(form, "opened"); // important for IE6/7                        signal(link, "onclick");                    }                                        var close_button = findChildElements(form, [".close-popup"])[0];                    if (close_button) {                        connect(close_button, "onclick", function () {                            var href = window.location.href.split("#")[0];                            window.location.href = href;                        });                    }                }            });         }    }}// connect(window, "onload", ImagePreview, "onLoad");// connect(window, "onload", helpTexts, "onLoad");// connect(window, "onload", function () {     //     try {//         address_form = new AddressForm("address-block");   //         address_form.init();//         contact_form = new ContactForm("contact-block", "contact-select", []);    //         contact_form.init();//         connect($("user_form"), "onsubmit", contact_form, "checkEmptyRowsFields"); //         WarningForm.init($("user_form"));//           //     } finally {//         removeElementClass($("user_form"), "invisible");   //     }     // });